<!DOCTYPE html>
<html lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>מיפוי עכביש מנהלים</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            direction: rtl;
            padding: 20px;
            background-color: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }
        .container {
            max-width: 900px;
            margin: 20px auto;
            background-color: #fff;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        h1 {
            color: #0056b3;
            text-align: center;
            margin-bottom: 30px;
        }
        h3 {
            color: #007bff;
            margin-top: 25px;
            margin-bottom: 15px;
            border-bottom: 2px solid #dee2e6;
            padding-bottom: 8px;
        }
        .user-details {
            background-color: #fdfdfd;
            padding: 20px;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            margin-bottom: 25px;
        }
        .user-details .form-group {
            margin-bottom: 15px;
        }
        .user-details label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        .user-details input[type="text"],
        .user-details input[type="email"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .question-group {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #fdfdfd;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
        }
        .question-item {
            margin-bottom: 15px;
        }
        .question-item label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        .slider-container {
            display: flex;
            align-items: center;
        }
        input[type=range] {
            flex-grow: 1;
            margin-left: 15px;
            margin-right: 15px;
            cursor: pointer;
            background: #e9ecef;
            border-radius: 10px;
            height: 8px;
            -webkit-appearance: none;
            appearance: none;
        }
        input[type=range]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #007bff;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid #fff;
        }
        input[type=range]::-moz-range-thumb {
            width: 18px;
            height: 18px;
            background: #007bff;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid #fff;
        }
        .slider-value {
            min-width: 40px;
            text-align: center;
            background-color: #e9ecef;
            padding: 6px 10px;
            border-radius: 4px;
            font-weight: bold;
            color: #0056b3;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            margin-left: 8px;
            transition: background-color 0.2s ease-in-out;
        }
        button:hover {
            background-color: #0056b3;
        }
        #chartContainer {
            margin-top: 30px;
            padding: 20px;
            background-color: #fff; /* רקע לבן לקונטיינר של הגרף לתצוגה רגילה */
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            min-height: 500px;
        }
        canvas {
            max-width: 100%;
            height: auto;
        }
        .admin-section {
            margin-top: 30px;
            padding: 20px;
            background-color: #f1f3f5;
            border-radius: 8px;
        }
        .admin {
            display: none;
            margin-top: 15px;
            border: 1px solid #ced4da;
            padding: 15px;
            background-color: #fff;
            border-radius: 6px;
        }
        #adminConfig {
            width: 100%;
            box-sizing: border-box;
            font-family: monospace;
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 10px;
            min-height: 150px;
        }
        input[type=password] {
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ced4da;
            margin-left: 5px;
        }
        .button-group {
            text-align: center;
            margin-top: 25px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

<div class="container">
    <h1>תוכנית פיתוח מנהלים - קיבוץ בארי</h1>

    <div class="user-details">
        <h3>פרטי ממלא השאלון</h3>
        <div class="form-group">
            <label for="fullName">שם מלא:</label>
            <input type="text" id="fullName" name="fullName">
        </div>
        <div class="form-group">
            <label for="role">תפקיד:</label>
            <input type="text" id="role" name="role">
        </div>
        <div class="form-group">
            <label for="email">כתובת אימייל:</label>
            <input type="email" id="email" name="email">
        </div>
    </div>

    <div id="form"></div>

    <div class="button-group">
        <button onclick="submitAnswers()">שלח וסכם</button>
        <button onclick="exportChartImage()">הורד גרף כתמונה (PNG)</button>
        <button onclick="sendChartByEmail()">שלח גרף באימייל</button>
    </div>

    <div id="chartContainer">
        <canvas id="chart"></canvas>
    </div>

    <div class="admin-section">
        <h3>ממשק ניהול (קוד: 123456)</h3>
        <input type="password" id="adminCode" placeholder="הכנס קוד">
        <button onclick="toggleAdmin()">כניסה</button>
        <div class="admin" id="adminPanel">
            <textarea id="adminConfig" rows="15"></textarea><br>
            <button onclick="saveConfig()">שמור הגדרות</button>
        </div>
    </div>
</div>

<script>
// רישום התוסף באופן גלובלי (בדרך כלל לא נדרש אם טוענים דרך תג script, אבל ליתר ביטחון)
// Chart.register(ChartDataLabels); // בגרסאות חדשות של Chart.js ו-chartjs-plugin-datalabels, זה לרוב אוטומטי

let config = {
    "מנהיגות והשראה": [
        "אני מצליח/ה לרתום אנשים לחזון ולמטרות משותפות",
        "אני מהווה דוגמה אישית בהתנהלותי היומיומית",
        "אני יוצר/ת תחושת משמעות בקרב הצוות",
        "אני משדר/ת אופטימיות גם בזמנים מאתגרים",
        "אני מעודד/ת חדשנות ויוזמה"
    ],
    "ניהול משימות וביצועים": [
        "אני מגדיר/ה יעדים ברורים ובני השגה",
        "אני יודע/ת לקבוע סדרי עדיפויות נכונים",
        "אני עוקב/ת אחרי התקדמות וביצוע משימות",
        "אני מתמודד/ת עם חריגות בזמנים או במשאבים בצורה יעילה",
        "אני עומד/ת ביעדים שהוגדרו"
    ],
    "תקשורת והקשבה": [
        "אני מקשיב/ה באמת לצוות ולחברי הקהילה",
        "אני מביע/ה את דעתי בצורה ברורה ומכבדת",
        "אני נגיש/ה וזמין/ה לשאלות ודיונים",
        "אני מצליח/ה לפתור אי-הבנות או קונפליקטים בתקשורת",
        "אני שואף/ת להביא בחשבון מגוון דעות"
    ],
    "קבלת החלטות": [
        "אני מקבל/ת החלטות בזמן הנכון",
        "אני בוחן/ת חלופות לפני בחירה",
        "אני לוקח/ת אחריות גם כשיש טעויות",
        "אני מסביר/ה את ההחלטות בצורה ברורה",
        "אני מסוגל/ת להתמודד עם אי-ודאות"
    ],
    "פיתוח אנשים והעצמה": [
        "אני מזהה יכולות וחוזקות אצל חברי הצוות",
        "אני מעניק/ה משוב בונה ותומך/ת בצמיחה",
        "אני מייצר/ת הזדמנויות ללמידה ופיתוח",
        "אני סומך/ת על אחרים ומאציל/ה סמכויות",
        "אני חוגג/ת הצלחות והישגים של הצוות"
    ],
    "ניהול קונפליקטים": [
        "אני מזהה קונפליקטים בשלב מוקדם",
        "אני ניגש/ת לקונפליקט בגישה פתוחה ולא שיפוטית",
        "אני מתמקד/ת במציאת פתרונות ולא בהאשמות",
        "אני מצליח/ה לגשר בין צדדים שונים",
        "אני לומד/ת מקונפליקטים לצורך שיפור עתידי"
    ],
    "ניהול שינוי": [
        "אני מזהה את הצורך בשינוי בזמן",
        "אני מסביר/ה לצוות את מטרות השינוי",
        "אני תומך/ת באנשים שמתקשים להסתגל לשינויים",
        "אני מתכנן/ת צעדים ברורים ליישום שינוי",
        "אני נשאר/ת גמיש/ה ומתאים/ה את הגישה תוך כדי תנועה"
    ],
    "חשיבה אסטרטגית וקהילתית": [
        "אני רואה את התמונה הרחבה מעבר למשימות היומיום",
        "אני מתחשב/ת בצרכים ובמגמות עתידיות בקיבוץ",
        "אני מתכנן/ת לטווח ארוך ולא רק קצר",
        "אני מזהה חיבורים בין תחומים שונים בקהילה",
        "אני דואג/ת לאיזון בין צרכים מיידיים לחזון עתידי"
    ]
};

let chartInstance = null;

// Function to render the form with sliders
function renderForm() {
    const formDiv = document.getElementById('form');
    let html = '<h3>שאלון הערכה</h3>';
    Object.keys(config).forEach(domain => {
        html += `<div class="question-group"><h4>${domain}</h4>`;
        config[domain].forEach((q, i) => {
            const questionId = `q-${domain.replace(/[^a-zA-Z0-9א-ת]/g, '-')}-${i}`;
            html += `
                <div class="question-item">
                    <label for="${questionId}">${q}</label>
                    <div class="slider-container">
                        <input type="range" id="${questionId}" min="1" max="5" value="3" step="0.1" data-domain="${domain}" oninput="updateSliderValue(this)">
                        <span class="slider-value" id="${questionId}-value">3.0</span>
                    </div>
                </div>`;
        });
        html += `</div>`;
    });
    formDiv.innerHTML = html;
}

// Function to update the displayed value of a slider
function updateSliderValue(slider) {
    const valueSpan = document.getElementById(`${slider.id}-value`);
    if (valueSpan) {
        valueSpan.textContent = parseFloat(slider.value).toFixed(1);
    }
}

// Function to submit answers and generate/update the chart
function submitAnswers() {
    const inputs = document.querySelectorAll('input[type=range]');
    const domainScores = {};
    const counts = {};

    inputs.forEach(input => {
        const domain = input.dataset.domain;
        const value = parseFloat(input.value);
        domainScores[domain] = (domainScores[domain] || 0) + value;
        counts[domain] = (counts[domain] || 0) + 1;
    });

    const avgScores = Object.keys(domainScores).map(d => ({
        domain: d,
        avg: domainScores[d] / counts[d]
    }));

    const ctx = document.getElementById('chart').getContext('2d');

    if (chartInstance) {
        chartInstance.destroy();
    }

    chartInstance = new Chart(ctx, {
        type: 'radar',
        data: {
            labels: avgScores.map(a => a.domain),
            datasets: [{
                label: 'הערכה עצמית',
                data: avgScores.map(a => a.avg),
                fill: true,
                backgroundColor: 'rgba(0, 123, 255, 0.25)',
                borderColor: 'rgba(0, 123, 255, 1)',
                pointBackgroundColor: 'rgba(0, 123, 255, 1)',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgba(0, 123, 255, 1)',
                borderWidth: 2.5,
                pointRadius: 4,
                pointHoverRadius: 6
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                r: {
                    min: 0,
                    max: 5,
                    beginAtZero: true,
                    ticks: {
                        stepSize: 0.2,
                        display: true,
                        backdropColor: 'transparent',
                        color: '#495057',
                        font: {
                            size: 10
                        },
                        callback: function(value) {
                            return value.toFixed(1);
                        }
                    },
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)',
                        lineWidth: 1.5
                    },
                    pointLabels: {
                        display: true,
                        font: {
                            size: 14,
                            weight: '500'
                        },
                        color: '#0056b3'
                    },
                    angleLines: {
                        color: 'rgba(0, 0, 0, 0.1)'
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 15,
                            family: "'Arial', sans-serif"
                        },
                        color: '#333',
                        padding: 20
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0,0,0,0.8)',
                    titleFont: { size: 14, family: "'Arial', sans-serif" },
                    bodyFont: { size: 12, family: "'Arial', sans-serif" },
                    padding: 12,
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.r !== null) {
                                label += context.parsed.r.toFixed(1);
                            }
                            return label;
                        }
                    }
                },
                // הגדרות עבור chartjs-plugin-datalabels
                datalabels: {
                    display: true,
                    align: 'top', // מיקום התווית מעל הנקודה
                    anchor: 'end', // עוגן בקצה הנקודה
                    offset: 8, // הרחקה קלה מהנקודה
                    color: '#333333', // צבע הטקסט של התווית
                    backgroundColor: 'rgba(255, 255, 255, 0.7)', // רקע חצי שקוף לתווית
                    borderColor: 'rgba(0, 123, 255, 0.5)', // צבע מסגרת לתווית
                    borderWidth: 1, // עובי מסגרת
                    borderRadius: 4, // עיגול פינות
                    padding: { // ריווח פנימי
                        top: 3,
                        bottom: 3,
                        left: 5,
                        right: 5
                    },
                    font: {
                        weight: 'bold',
                        size: 10
                    },
                    formatter: function(value, context) {
                        // הצגת הערך עם ספרה אחת אחרי הנקודה
                        return value.toFixed(1);
                    }
                }
            }
        },
        // רישום התוסף באופן מקומי עבור הגרף הספציפי הזה (מומלץ)
        plugins: [ChartDataLabels]
    });
}

// Function to export the chart as a PNG image with a white background
function exportChartImage() {
    if (!chartInstance) {
        alert("אנא צור גרף תחילה על ידי לחיצה על 'שלח וסכם'.");
        return;
    }
    const canvas = document.getElementById('chart');
    const tempCanvas = document.createElement('canvas'); // יצירת קנבס זמני
    tempCanvas.width = canvas.width;
    tempCanvas.height = canvas.height;
    const tempCtx = tempCanvas.getContext('2d');

    // 1. צייר רקע לבן על הקנבס הזמני
    tempCtx.fillStyle = 'white';
    tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);

    // 2. צייר את הגרף הקיים על הקנבס הזמני (מעל הרקע הלבן)
    //    הדרך הפשוטה היא לצייר את תמונת הקנבס המקורי
    tempCtx.drawImage(canvas, 0, 0);

    // יצירת URL מהקנבס הזמני (שכעת יש לו רקע לבן)
    const imageURL = tempCanvas.toDataURL('image/png');

    const a = document.createElement('a');
    a.href = imageURL;
    a.download = 'spider_chart_white_bg.png'; // שינוי שם הקובץ לציון הרקע
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}


// Function to open mail client for sending the chart
function sendChartByEmail() {
    const emailAddress = document.getElementById('email').value;
    const fullName = document.getElementById('fullName').value || "משתמש";

    if (!emailAddress) {
        alert("אנא הזן כתובת אימייל בשדות פרטי הממלא.");
        return;
    }
    if (!chartInstance) {
        alert("אנא צור גרף תחילה על ידי לחיצה על 'שלח וסכם'.");
        return;
    }

    const subject = `מיפוי עכביש עבור ${fullName}`;
    const body = `שלום ${fullName},\n\nמצורפת בזאת תמונת גרף העכביש שלך.\nאנא הורד את התמונה באמצעות כפתור "הורד גרף כתמונה" וצרף אותה למייל זה.\n\nבברכה,\nצוות מיפוי מנהלים`;

    const mailtoLink = `mailto:${encodeURIComponent(emailAddress)}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

    // נסה לפתוח את קישור ה-mailto
    try {
        window.location.href = mailtoLink;
    } catch (e) {
        console.error("שגיאה בפתיחת קישור mailto:", e);
        alert("לא ניתן היה לפתוח את תוכנת האימייל באופן אוטומטי. ייתכן שאין תוכנת אימייל מוגדרת בדפדפן או שיש חוסם פעולה זו.");
    }

    alert("חלון האימייל שלך אמור להיפתח. אנא הורד את תמונת הגרף (עם רקע לבן) באמצעות כפתור 'הורד גרף כתמונה' וצרף אותה להודעה לפני השליחה.");
}


// Function to toggle the admin panel visibility
function toggleAdmin() {
    const code = document.getElementById('adminCode').value;
    const adminPanel = document.getElementById('adminPanel');
    if (code === '123456') {
        const isDisplayed = adminPanel.style.display === 'block';
        adminPanel.style.display = isDisplayed ? 'none' : 'block';
        if (!isDisplayed) {
            document.getElementById('adminConfig').value = JSON.stringify(config, null, 2);
        }
    } else {
        alert('קוד שגוי');
    }
    document.getElementById('adminCode').value = '';
}

// Function to save new configuration from admin panel
function saveConfig() {
    try {
        const newConfigText = document.getElementById('adminConfig').value;
        const newConfig = JSON.parse(newConfigText);
        config = newConfig;
        renderForm();
        if (chartInstance) {
            chartInstance.destroy();
            chartInstance = null;
        }
        alert('הגדרות השאלון עודכנו בהצלחה. הטופס עודכן.');
    } catch (e) {
        console.error("Error saving config:", e);
        alert('שגיאה בשמירת ההגדרות: ודא שהפורמט של ה-JSON נכון. פרטים נוספים בקונסול הדפדפן (F12).');
    }
}

// Initial rendering of the form when the page loads
document.addEventListener('DOMContentLoaded', () => {
    renderForm();
});
</script>

</body>
</html>
